---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-rfcs/main/data/RFC7749.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1870'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b369e945211deb4a7ddc4d9b45c0b7196e3325b323d831f4e7fe7f32e5424e7c"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 236A:19BC:E9734:153376:63E2187D
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 07 Feb 2023 09:25:06 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11231-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1675761906.269245,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5f6b06cf257bb19ab93efda58f13b79ca7259fac
      Expires:
      - Tue, 07 Feb 2023 09:30:06 GMT
      Source-Age:
      - '116'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.1
        id: RFC7749
        title:
        - content: The "xml2rfc" Version 2 Vocabulary
          format: text/plain
          type: main
        link:
        - content: https://www.rfc-editor.org/info/rfc7749
          type: src
        type: standard
        docid:
        - id: RFC 7749
          type: IETF
          primary: true
        - id: 10.17487/RFC7749
          type: DOI
        docnumber: RFC7749
        date:
        - type: published
          value: 2016-02
        contributor:
        - person:
            name:
              given:
                forename:
                - language:
                  - en
                  script:
                  - Latn
                  initial: J
                formatted_initials:
                  content: J.
                  language:
                  - en
                  script:
                  - Latn
              surname:
                content: Reschke
                language:
                - en
                script:
                - Latn
              completename:
                content: J. Reschke
                language:
                - en
                script:
                - Latn
          role:
          - type: author
        - organization:
            name:
            - content: RFC Publisher
          role:
          - type: publisher
        - organization:
            name:
            - content: RFC Series
          role:
          - type: authorizer
        revdate: 2016-02
        language:
        - en
        script:
        - Latn
        abstract:
        - content: '<p>This document defines the "xml2rfc" version 2 vocabulary: an XML-based
            language used for writing RFCs and Internet-Drafts.</p><p>Version 2 represents
            the state of the vocabulary (as implemented by several tools and as used by the
            RFC Editor) around 2014.</p><p>This document obsoletes RFC 2629.</p>'
          language:
          - en
          script:
          - Latn
          format: text/html
        relation:
        - type: obsoletedBy
          bibitem:
            id: RFC7991
            docid:
            - id: RFC7991
              type: IETF
              primary: true
            formattedref:
              content: RFC7991
              format: text/plain
        series:
        - title:
            content: RFC
            format: text/plain
          number: '7749'
        keyword:
        - content: XML
        - content: IETF
        - content: RFC
        - content: Internet-Draft
        - content: Vocabulary
        ext:
          schema-version: v1.0.0
  recorded_at: Tue, 07 Feb 2023 09:25:06 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 639","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.1.3)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Feb 2023 09:25:07 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 07 Feb 2023 09:25:07 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/00/47/4766.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=D284981A69CABA78265B0407B352A943; Path=/; Secure; HttpOnly
      Location:
      - "/standard/4766.html"
      Content-Length:
      - '0'
      Date:
      - Tue, 07 Feb 2023 09:25:10 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Tue, 07 Feb 2023 09:25:11 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/4766.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=54297FC283FA24B5D6174B65E03F6945; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Tue, 07 Feb 2023 09:25:13 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 07 Feb 2023 09:25:14 GMT
recorded_with: VCR 6.1.0
