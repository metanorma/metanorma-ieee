---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-rfcs/main/data/RFC7749.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1948'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"9a15c4e0ab40687e89636715229a7f3954d75f3939ef2d9c2e673bc68cb66502"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 3252:1B3A2:1E51A8:26A2DB:6516DFFD
      Accept-Ranges:
      - bytes
      Date:
      - Fri, 29 Sep 2023 14:32:50 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11247-MEL
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1695997971.852522,VS0,VE14
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 8c2bc47bf87af2102c0a3d9766f8622f12beb473
      Expires:
      - Fri, 29 Sep 2023 14:37:50 GMT
      Source-Age:
      - '17'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        schema-version: v1.2.4
        id: RFC7749
        title:
        - content: The "xml2rfc" Version 2 Vocabulary
          format: text/plain
          type: main
        link:
        - content: https://www.rfc-editor.org/info/rfc7749
          type: src
        type: standard
        docid:
        - id: RFC 7749
          type: IETF
          primary: true
        - id: 10.17487/RFC7749
          type: DOI
        docnumber: RFC7749
        date:
        - type: published
          value: 2016-02
        contributor:
        - person:
            name:
              given:
                forename:
                - language:
                  - en
                  script:
                  - Latn
                  initial: J
                formatted_initials:
                  content: J.
                  language:
                  - en
                  script:
                  - Latn
              surname:
                content: Reschke
                language:
                - en
                script:
                - Latn
              completename:
                content: J. Reschke
                language:
                - en
                script:
                - Latn
          role:
          - type: author
        - organization:
            name:
            - content: RFC Publisher
          role:
          - type: publisher
        - organization:
            name:
            - content: RFC Series
          role:
          - type: authorizer
        revdate: 2016-02
        language:
        - en
        script:
        - Latn
        abstract:
        - content: '<p>This document defines the "xml2rfc" version 2 vocabulary: an XML-based
            language used for writing RFCs and Internet-Drafts.</p><p>Version 2 represents
            the state of the vocabulary (as implemented by several tools and as used by the
            RFC Editor) around 2014.</p><p>This document obsoletes RFC 2629.</p>'
          language:
          - en
          script:
          - Latn
          format: text/html
        relation:
        - type: obsoletedBy
          bibitem:
            id: RFC7991
            docid:
            - id: RFC7991
              type: IETF
              primary: true
            formattedref:
              content: RFC7991
              format: text/plain
        series:
        - title:
            content: RFC
            format: text/plain
          number: '7749'
        - type: stream
          title:
            content: IAB
            format: text/plain
        keyword:
        - content: XML
        - content: IETF
        - content: RFC
        - content: Internet-Draft
        - content: Vocabulary
        ext:
          schema-version: v1.0.1
          stream: IAB
  recorded_at: Fri, 29 Sep 2023 14:32:50 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 639","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.3.2), Ruby (3.2.2)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Fri, 29 Sep 2023 14:32:51 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 29 Sep 2023 14:32:51 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/07/45/74575.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=FD4C5472DADEFFE8574C640648E140C7; Path=/; Secure; HttpOnly
      Location:
      - "/standard/74575.html"
      Content-Length:
      - '0'
      Date:
      - Fri, 29 Sep 2023 14:32:54 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Fri, 29 Sep 2023 14:32:54 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/74575.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A7F680C7AD086D7B0BF68AA444625CB1; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 29 Sep 2023 14:32:56 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 29 Sep 2023 14:32:56 GMT
recorded_with: VCR 6.1.0
